import pytestimport popsicle as juce#==================================================================================================def test_parse_with_valid_json_returns_correct_result():    text = '{"key": "value"}'    expected = {"key": "value"}    result = juce.JSON.parse(text)    assert result == expected#==================================================================================================def test_parse_with_invalid_json_returns_empty_var():    text = '{"key": "value"'    result = juce.JSON.parse(text)    assert not result#==================================================================================================@pytest.mark.skip(reason="unfinished")def test_parse_with_file_returns_correct_result(mocker):    file_path = "valid_json_file.json"    mocker.patch("builtins.open", mocker.mock_open(read_data='{"key": "value"}'))    file = juce.File(file_path)    expected = {"key": "value"}    result = juce.JSON.parse(file)    assert result == expected#==================================================================================================@pytest.mark.skip(reason="unfinished")def test_parse_with_stream_returns_correct_result(mocker):    stream_data = '{"key": "value"}'    mocker.patch("io.StringIO.read", return_value=stream_data)    stream = juce.InputStream()    expected = {"key": "value"}    result = juce.JSON.parse(stream)    assert result == expected#==================================================================================================def test_to_string_with_default_options():    obj_to_format = {"key": "value"}    expected = '{"key": "value"}'    result = juce.JSON.toString(obj_to_format, allOnOneLine=True)    assert result == expected#==================================================================================================def test_to_string_with_format_options():    obj_to_format = {"key": "value"}    format_options = juce.JSON.FormatOptions().withSpacing(juce.JSON.Spacing.singleLine).withMaxDecimalPlaces(2)    expected = '{"key": "value"}'    result = juce.JSON.toString(obj_to_format, format_options)    assert result == expected#==================================================================================================def test_from_string_with_valid_json():    json_string = '{"key": "value"}'    expected = {"key": "value"}    result = juce.JSON.fromString(json_string)    assert result == expected#==================================================================================================def test_escape_string_escapes_special_characters():    original_string = '"Hello, \nWorld!"'    expected = '\\"Hello, \\nWorld!\\"'    result = juce.JSON.escapeString(original_string)    assert result == expected#==================================================================================================@pytest.mark.skip(reason="unfinished")def test_parse_quoted_string_with_valid_input():    text = '"Hello, World!"'    expected = "Hello, World!"    char_pointer = text    result_var = None    result = juce.JSON.parseQuotedString(char_pointer, result_var)    assert result.wasOk() and result_var == expected